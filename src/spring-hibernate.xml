<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd"
	default-lazy-init="true">
	<description>Spring数据源配置</description>
	<!-- 定义 Autowired 自动注入 bean -->

	<context:annotation-config />
	<!-- 组件扫描 @Service,@Repository,@Controller等 -->
	<context:component-scan base-package="org.bond">
		<!-- 排除相应的注解类型 -->
		<!-- <context:component-scan base-package="org.bond.hibernate.service"> -->
		<!-- <context:exclude-filter type="annotation" -->
		<!-- expression="org.springframework.stereotype.Service" /> -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<!-- <context:exclude-filter type="annotation" -->
		<!-- expression="org.springframework.stereotype.Component" /> -->
		<!-- <context:exclude-filter type="annotation" -->
		<!-- expression="org.springframework.stereotype.Repository" /> -->
	</context:component-scan>

	<!-- 引入mysql jdbc的配置文件 -->
	<context:property-placeholder
		ignore-resource-not-found="false" location="classpath:jdbc.properties" />

	<!-- 配置数据源，从上面配置文件读取 -->
	<bean id="spDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 配置初始化大小、最小、最大 -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!-- 配置session factory，hibernate4 直接改为localsession，也是从上面的配置文件读取 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="spDataSource" />
		<property name="hibernateProperties">
			<props>
				<!-- 设置数据库方言 -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- 是否在控制台显示sql -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- 是否格式化sql，优化显示 -->
				<prop key="hibernate.format_sql">true</prop>
				<!-- 生成统计信息 -->
				<prop key="hibernate.generate_statistics">true</prop>
				<!-- 是否开启二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<!-- 是否开启查询缓存 -->
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<!-- 数据库批量查询最大数 -->
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<!-- 数据库批量更新、添加、删除操作最大数 -->
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<!-- 是否自动提交事务 -->
				<prop key="hibernate.connection.autocommit">true</prop>
				<!-- 指定hibernate在何时释放JDBC连接 -->
				<prop key="hibernate.connection.release_mode">auto</prop>
				<!-- 创建session方式 hibernate4.x 的方式 -->
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext
				</prop>
				<!-- 设置自动创建|更新|验证数据库表结构 -->
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
				<!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
					所以把它设置为none即可 -->
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
		<!-- 自动扫描实体对象 tdxy.bean的包结构中存放实体类 -->
		<property name="packagesToScan">
			<value>
				org.bond.entity
			</value>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 声明式容器事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 事务执行方式 REQUIRED：指定当前方法必需在事务环境中运行， 如果当前有事务环境就加入当前正在执行的事务环境， 如果当前没有事务，就新建一个事务。 
				这是默认值; read-only="true" 表示只读 -->
			<!-- 根据方法名指定事务的属性 -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="search*" read-only="true" />
			<!-- NoRollbackException不用回滚 -->
			<tx:method name="*" propagation="REQUIRED" rollback-for="Throwable"
				no-rollback-for="org.bond.exception.NoRollbackException" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置事务切入点，以及把事务切入点和事务属性关联起来 ,执行有关的hibernate session的事务操作 -->
	<aop:config>
		<aop:pointcut id="pointcut"
			expression="execution(* org.bond.hibernate.service..*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut" />
	</aop:config>
	<!-- 对@Transactional注解进行加工处理,spring推荐在业务实现类上面加,而非接口 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
</beans>